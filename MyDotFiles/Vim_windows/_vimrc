" for GUI
set guifont=courier_new:h10
" Color scheme
" colorscheme ron
" Vundel
set nocompatible
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/vimfiles
set rtp+=$HOME/vimfiles/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"Ultisnipets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'qpkorr/vim-bufkill'
"
" A Vim Plugin for Lively Previewing LaTeX PDF Output
Plugin 'xuhdev/vim-latex-live-preview'

" Make Vim look good
Plugin 'tomasr/molokai'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Vim as a programmer's text editor
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
" Plugin 'scrooloose/syntastic'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'
Plugin 'Shougo/neocomplete.vim'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'
Plugin 'godlygeek/tabular'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'benmills/vimux'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'gilsondev/searchtasks.vim'
Plugin 'BufOnly.vim'
Plugin 'wesQ3/vim-windowswap'
Plugin 'mhinz/vim-startify'
Plugin 'dense-analysis/ale'
Plugin 'davidhalter/jedi-vim'

" Generic Programming Support
Plugin 'Townk/vim-autoclose'
Plugin 'tomtom/tcomment_vim'
Plugin 'tobyS/vmustache'
Plugin 'janko-m/vim-test'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'neomake/neomake'

" Markdown / Writting
Plugin 'reedes/vim-pencil'
Plugin 'tpope/vim-markdown'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'dbmrq/vim-ditto'
Plugin 'reedes/vim-wordy'
Plugin 'reedes/vim-lexical'
Plugin 'Shougo/unite.vim'
Plugin 'rhysd/unite-redpen.vim'
Plugin 'LanguageTool'
Plugin 'rhysd/vim-grammarous'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'vimwiki/vimwiki'
Plugin 'dpelle/vim-LanguageTool'

" Git Support
Plugin 'kablamo/vim-git-log'
Plugin 'gregsexton/gitv'
Plugin 'tpope/vim-fugitive'

call vundle#end()

filetype plugin on
filetype indent plugin on
syntax on

" ============ General Configuration ==============
" Switching buffer without saving
set hidden
" Better command-line completion
set wildmenu
" Show partial commands in the last line of the screen
set showcmd
" Numbers
set number
" Enable highlighting of the current line
set cursorline

" Color Line
set colorcolumn=80
highlight ColorColumn ctermbg=lightblue guibg=lightblue

" -----------------------------
"  Document encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,latin1
" -----------------------------
"  set indentation
set foldmethod=indent
set autoindent
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set nosmartindent
set cindent
filetype plugin indent on
set cinkeys-=0#
set indentkeys-=0#
autocmd FileType * set cindent "some file types override it

" -----------------------------
"  set configuration
set nowrap

" -----------------------------
" closing Characters
" set AutoCloseOn

" -----------------------------
" Spelling on TeX documents
autocmd FileType plaintex,tex,latex syntax spell toplevel

" ============ Plugins ==============
" -----------------------------
" Snippets
set runtimepath+=$HOME/vimfiles/my-snippets/
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

" -----------------------------
" LatexPreview
" let g:livepreview_previewer = 'open -a Preview'
" let g:livepreview_previewer = 'zathura'
" let g:livepreview_cursorhold_recompile = 0

" -----------------------------
" Markdown Preview
let vim_markdown_preview_github=1
let vim_markdown_preview_toggle=1
" let vim_markdown_preview_temp_file=1

" -----------------------------
" bling/vim-airline
set laststatus=1

" let g:airline_powerline_fonts = 1
let g:airline_detect_paste = 1
let g:airline#extensions#tabline#enable = 1
let g:airline_theme="solarized"
" let g:airline_solarized_bg='light'

" -----------------------------
" nerdtree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" ----- davidhalter/jedi-vim -----
let g:jedi#auto_initialization = 1

" ----- scrooloose/syntastic settings -----
" let g:syntastic_disabled_filetypes=['python','py']
" let g:syntastic_error_symbol = '✘'
" let g:syntastic_warning_symbol = "▲"
" augroup mySyntastic
"   au!
"   au FileType tex let b:syntastic_mode = "passive"
" augroup END

" ----- dense-analysis/ale settings -----
" load the Anaconda package
let venv = 'python37'
let mypath = 'C:\Users\gonzad3\Anaconda3\envs\' . venv . ';'
    \      . 'C:\Users\gonzad3\Anaconda3\envs\' . venv . '\Scripts;'
    \      . 'C:\Users\gonzad3\Anaconda3\envs\' . venv . '\Library\bin;'
let $PATH = mypath . $PATH
let g:ale_enable = 1
let g:ale_linters = {'python': ['flake8', 'mypy', 'pycodestyle', 'pylint']}
" let g:ale_linters = {'python': ['flake8', 'mypy', 'pycodestyle']}
let g:ale_linters_explicit = 1
let g:airline#extensions#ale#enabled = 1

" ----- vimwiki/vimwiki -----
let g:vimwiki_list = [{'path': $HOME . '/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" Makes vimwiki markdown links
let g:vimwiki_markdown_link_ext = 1

" ----- dense-analysis/ale settings -----

let g:languagetool_jar = $HOME . '/LanguageTool-5.2/languagetool-commandline.jar'


" ----- xolox/vim-easytags settings -----
" Where to look for tags files
set tags=./tags;,~/.vimtags
" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" Neocomplete Settings
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
\ 'default' : '',
\ 'vimshell' : $HOME.'/.vimshell_hist',
\ 'scheme' : $HOME.'/.gosh_completions'
\ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
function! s:my_cr_function()
return (pumvisible() ? '\<C-y>' : '' ) . '\<CR>'
  " For no inserting <CR> key.
  return pumvisible() ? '\<C-y>' : '\<CR>'
endfunction
" Close popup by <Space>.
" inoremap <expr><Space> pumvisible() ? '\<C-y>' : '\<Space>'
" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 0
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)

" -----------------------------
" Language Tool
" let g:languagetool_jar='$HOME/languagetool/languagetool-standalone/target/LanguageTool-4.5-SNAPSHOT/LanguageTool-4.5-SNAPSHOT/languagetool-commandline.jar'
" Setting English grammar checking
" set spelllang=en_us LanguageTool


" ----- reedes/vim-lexical settings -----
set nocompatible
filetype plugin on       " may already be in your .vimrc

augroup lexical
  autocmd!
  autocmd FileType markdown,mkd call lexical#init()
  autocmd FileType textile call lexical#init()
  autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END

let g:lexical#spell = 1

" ----- fzf settings -----
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" fzf for spelling
function! FzfSpellSink(word)
  exe 'normal! "_ciw'.a:word
endfunction
function! FzfSpell()
  let suggestions = spellsuggest(expand("<cword>"))
  return fzf#run({'source': suggestions, 'sink': function("FzfSpellSink"), 'down': 10 })
endfunction
nnoremap z= :call FzfSpell()<CR>

"""""""""""""""""""""""""""""""""""""
" Mappings configurationn
"""""""""""""""""""""""""""""""""""""
map <C-n> :NERDTreeToggle<CR>
map <C-m> :TagbarToggle<CR>
" Omnicomplete Better Nav
inoremap <expr> <c-j> ("\<C-n>")
inoremap <expr> <c-k> ("\<C-p>")
" Neocomplete Plugin mappins
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Mapping selecting Mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Shortcuts
nnoremap <Leader>o :Files<CR> 
nnoremap <C-b> :Buffers<CR> 
nnoremap <C-g>g :Ag<CR> 
nnoremap <C-l> :Lines<CR> 
nnoremap <Leader><Leader> :Commands<CR> 
nnoremap <Leader>O :CtrlP<CR>
nnoremap <Leader>w :w<CR>
vmap <Leader>y "+y
vmap <Leader>p "+p
nmap <Leader>p "+p
" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Show special characters
noremap <F5> :set list!<CR>
inoremap <F5> <C-o>:set list!<CR>
cnoremap <F5> <C-c>:set list!<CR>

" vimwiki
:nmap <Leader>wq <Plug>VimwikiIndex

" Markdown Preview
" let vim_markdown_preview_hotkey='<C-p>'


